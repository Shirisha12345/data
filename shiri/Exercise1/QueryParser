package com.stackroute.datamunger.query.parser;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

/*There are total 4 DataMungerTest file:
 * 
 * 1)DataMungerTestTask1.java file is for testing following 4 methods
 * a)getBaseQuery()  b)getFileName()  c)getOrderByClause()  d)getGroupByFields()
 * 
 * Once you implement the above 4 methods,run DataMungerTestTask1.java
 * 
 * 2)DataMungerTestTask2.java file is for testing following 2 methods
 * a)getFields() b) getAggregateFunctions()
 * 
 * Once you implement the above 2 methods,run DataMungerTestTask2.java
 * 
 * 3)DataMungerTestTask3.java file is for testing following 2 methods
 * a)getRestrictions()  b)getLogicalOperators()
 * 
 * Once you implement the above 2 methods,run DataMungerTestTask3.java
 * 
 * Once you implement all the methods run DataMungerTest.java.This test case consist of all
 * the test cases together.
 */

public class QueryParser {

	private QueryParameter queryParameter = new QueryParameter();

	/*
	 * This method will parse the queryString and will return the object of
	 * QueryParameter class
	 */
	public QueryParameter parseQuery(String queryString) {

		queryParameter.setFileName(getFileName(queryString));
		queryParameter.setBaseQuery(getBaseQuery(queryString));
		queryParameter.setFields(getFields(queryString));
		queryParameter.setOrderByFields(getOrderByFields(queryString));
		queryParameter.setGroupByFields(getGroupByFields(queryString));
		queryParameter.setLogicalOperators(getLogicalOperators(queryString));
		// queryParameter.aggregateFunctions=getAggregateFunctions(queryString);

		return queryParameter;
	}

	/*
	 * Extract the name of the file from the query. File name can be found after the
	 * "from" clause.
	 */
	public String getFileName(String queryString) {

		queryString = queryString.toLowerCase();
		if (queryString.contains("from")) {
			String result = "";
			String[] str = queryString.split(" ");
			for (int i = 0; i < str.length; i++) {
				if (str[i].contains(".csv")) {
					result = str[i];
				}
			}
			return result;
		}
		return null;
	}

	/*
	 * 
	 * Extract the baseQuery from the query.This method is used to extract the
	 * baseQuery from the query string. BaseQuery contains from the beginning of the
	 * query till the where clause
	 */
	public String getBaseQuery(String queryString) {

		queryString = queryString.toLowerCase();
		int index = 0;
		if (queryString.contains("where")) {
			index = queryString.indexOf(" where ");
		} else if (queryString.contains("group by")) {
			index = queryString.indexOf(" group");
		}
		queryString = queryString.substring(0, index);
		return queryString;
	}

	/*
	 * extract the order by fields from the query string. Please note that we will
	 * need to extract the field(s) after "order by" clause in the query, if at all
	 * the order by clause exists. For eg: select city,winner,team1,team2 from
	 * data/ipl.csv order by city from the query mentioned above, we need to extract
	 * "city". Please note that we can have more than one order by fields.
	 */
	public List<String> getOrderByFields(String queryString) {

		final StringBuffer output = new StringBuffer();
		String[] splitted = queryString.split(" ");
		String[] result = null;
		List<String> listresult = new ArrayList<String>();
		for (int i = 0; i < splitted.length; i++) {
			if (splitted[i].equals("order") && splitted[i + 1].equals("by")) {
				for (int j = i + 2; j < splitted.length; j++) {
					if (splitted[j].contains(";")) {
						break;
					}
					output.append(splitted[j]);
					output.append(' ');
				}
				result = output.toString().trim().split(" |,");
				for (String string : result) {
					listresult.add(string);
				}
			}
		}
		return listresult;
	}

	/*
	 * Extract the group by fields from the query string. Please note that we will
	 * need to extract the field(s) after "group by" clause in the query, if at all
	 * the group by clause exists. For eg: select city,max(win_by_runs) from
	 * data/ipl.csv group by city from the query mentioned above, we need to extract
	 * "city". Please note that we can have more than one group by fields.
	 */

	public List<String> getGroupByFields(String queryString) {

		final StringBuffer output = new StringBuffer();
		String[] splitted = queryString.split(" ");
		String[] result = null;
		List<String> liresult = new ArrayList<String>();
		for (int i = 0; i < splitted.length; i++) {
			if (splitted[i].equals("group") && splitted[i + 1].equals("by")) {
				for (int j = i + 2; j < splitted.length; j++) {
					if (splitted[j].contains(";")) {
						break;
					}
					output.append(splitted[j]);
					output.append(' ');
				}
				result = output.toString().trim().split(" |,");
				for (String string : result) {
					liresult.add(string);
				}
			}
		}
		return liresult;
	}

	/*
	 * Extract the selected fields from the query string. Please note that we will
	 * need to extract the field(s) after "select" clause followed by a space from
	 * the query string. For eg: select city,win_by_runs from data/ipl.csv from the
	 * query mentioned above, we need to extract "city" and "win_by_runs". Please
	 * note that we might have a field containing name "from_date" or "from_hrs".
	 * Hence, consider this while parsing.
	 */

	public List<String> getFields(String queryString) {

		queryString = queryString.toLowerCase();
		int index = queryString.length();
		if (queryString.contains("from")) {
			index = queryString.indexOf(" from ");
		}
		queryString = queryString.substring(6, index);
		String str[] = queryString.trim().split(",");

		List<String> list = Arrays.asList(str);

		return list;

	}

	/*
	 * Extract the conditions from the query string(if exists). for each condition,
	 * we need to capture the following: 1. Name of field 2. condition 3. value
	 * 
	 * For eg: select city,winner,team1,team2,player_of_match from data/ipl.csv
	 * where season >= 2008 or toss_decision != bat
	 * 
	 * here, for the first condition, "season>=2008" we need to capture: 1. Name of
	 * field: season 2. condition: >= 3. value: 2008
	 * 
	 * the query might contain multiple conditions separated by OR/AND operators.
	 * Please consider this while parsing the conditions.
	 * 
	 */

	/*
	 * Extract the logical operators(AND/OR) from the query, if at all it is
	 * present. For eg: select city,winner,team1,team2,player_of_match from
	 * data/ipl.csv where season >= 2008 or toss_decision != bat and city =
	 * bangalore
	 * 
	 * The query mentioned above in the example should return a List of Strings
	 * containing [or,and]
	 */

	public List<String> getLogicalOperators(String queryString) {

		queryString = queryString.toLowerCase();
		String[] query = queryString.split(" ");
		String out = "";
		if (queryString.contains(" where ")) {
			for (int i = 0; i < query.length; i++) {
				if (query[i].matches("and|or")) {
					out += query[i] + " ";
				}
			}

			String output[] = out.split(" ");

			List<String> list = Arrays.asList(output);

			return list;
		}

		return null;
	}

	/*
	 * Extract the aggregate functions from the query. The presence of the aggregate
	 * functions can determined if we have either "min" or "max" or "sum" or "count"
	 * or "avg" followed by opening braces"(" after "select" clause in the query
	 * string. in case it is present, then we will have to extract the same. For
	 * each aggregate functions, we need to know the following: 1. type of aggregate
	 * function(min/max/count/sum/avg) 2. field on which the aggregate function is
	 * being applied.
	 * 
	 * Please note that more than one aggregate function can be present in a query.
	 * 
	 * 
	 */

}

